apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: jekyll-site
  namespace: development
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 1Gi
---
apiVersion: v1
kind: Pod
metadata:
  name: jekyll
  labels:
    run: jekyll
  namespace: development
spec:
  containers:
  - name: jekyll
    image: kodekloud/jekyll-serve
    volumeMounts:
      - mountPath: "/site"
        name: site
    ports:
    - containerPort: 8080
  initContainers:
  - name: copy-jekyll-site
    image: kodekloud/jekyll
    command: [ "jekyll", "new", "/site" ]
    volumeMounts:
      - mountPath: "/site"
        name: site
  volumes:
    - name: site
      persistentVolumeClaim:
        claimName: jekyll-site
---
apiVersion: v1
kind: Service
metadata:
  name: jekyll
  namespace: development
spec:
  type: NodePort
  selector:
    run: jekyll
  ports:
    - port: 8080
      targetPort: 4000
      nodePort: 30097
---
apiVersion: rbac.authorization.k8s.io/v1
# This role binding allows "dave" to read secrets in the "development" namespace.
# You need to already have a ClusterRole named "secret-reader".
kind: RoleBinding
metadata:
  name:  developer-rolebinding
  #
  # The namespace of the RoleBinding determines where the permissions are granted.
  # This only grants permissions within the "development" namespace.
  namespace: development
subjects:
- kind: User
  name: drogo # Name is case sensitive
  apiGroup: rbac.authorization.k8s.io
roleRef:
  kind: ClusterRole
  name: developer-role
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: development
  name: developer-role
rules:
- apiGroups: [""] # "" indicates the core API group
  resources: ["persistentvolumeclaims", "pods", "services"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
                                                                         
#kubectl config set-credentials drogo --client-certificate=/root/drogo.crt --client-key=/root/drogo.key
#kubectl config set-context developer --user=drogo --cluster=kubernetes
#kubectl config use-context developer --user=drogo --cluster=kubernetes 
